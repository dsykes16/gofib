// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.5.0
// source: fibonacci.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fibonacci_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_fibonacci_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_fibonacci_proto_rawDescGZIP(), []int{0}
}

type Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Size) Reset() {
	*x = Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fibonacci_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Size) ProtoMessage() {}

func (x *Size) ProtoReflect() protoreflect.Message {
	mi := &file_fibonacci_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Size.ProtoReflect.Descriptor instead.
func (*Size) Descriptor() ([]byte, []int) {
	return file_fibonacci_proto_rawDescGZIP(), []int{1}
}

func (x *Size) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FibonacciRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *FibonacciRequest) Reset() {
	*x = FibonacciRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fibonacci_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibonacciRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciRequest) ProtoMessage() {}

func (x *FibonacciRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fibonacci_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciRequest.ProtoReflect.Descriptor instead.
func (*FibonacciRequest) Descriptor() ([]byte, []int) {
	return file_fibonacci_proto_rawDescGZIP(), []int{2}
}

func (x *FibonacciRequest) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type FibonacciResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FibonacciResult) Reset() {
	*x = FibonacciResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fibonacci_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibonacciResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciResult) ProtoMessage() {}

func (x *FibonacciResult) ProtoReflect() protoreflect.Message {
	mi := &file_fibonacci_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciResult.ProtoReflect.Descriptor instead.
func (*FibonacciResult) Descriptor() ([]byte, []int) {
	return file_fibonacci_proto_rawDescGZIP(), []int{3}
}

func (x *FibonacciResult) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FibonacciResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type FibonacciRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *FibonacciRangeRequest) Reset() {
	*x = FibonacciRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fibonacci_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibonacciRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciRangeRequest) ProtoMessage() {}

func (x *FibonacciRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fibonacci_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciRangeRequest.ProtoReflect.Descriptor instead.
func (*FibonacciRangeRequest) Descriptor() ([]byte, []int) {
	return file_fibonacci_proto_rawDescGZIP(), []int{4}
}

func (x *FibonacciRangeRequest) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *FibonacciRangeRequest) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

type FibonacciRangeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*FibonacciResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *FibonacciRangeResult) Reset() {
	*x = FibonacciRangeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fibonacci_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibonacciRangeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciRangeResult) ProtoMessage() {}

func (x *FibonacciRangeResult) ProtoReflect() protoreflect.Message {
	mi := &file_fibonacci_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciRangeResult.ProtoReflect.Descriptor instead.
func (*FibonacciRangeResult) Descriptor() ([]byte, []int) {
	return file_fibonacci_proto_rawDescGZIP(), []int{5}
}

func (x *FibonacciRangeResult) GetResult() []*FibonacciResult {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_fibonacci_proto protoreflect.FileDescriptor

var file_fibonacci_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x28, 0x0a, 0x10, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3f, 0x0a, 0x0f, 0x46,
	0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3f, 0x0a, 0x15,
	0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x4a, 0x0a,
	0x14, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63,
	0x69, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xda, 0x02, 0x0a, 0x09, 0x46, 0x69,
	0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x12, 0x43, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x62, 0x12, 0x1b, 0x2e, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x46, 0x69,
	0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e,
	0x61, 0x63, 0x63, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x62, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x66, 0x69,
	0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63,
	0x69, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61,
	0x63, 0x63, 0x69, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x33, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x10, 0x2e, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x2e,
	0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61,
	0x63, 0x63, 0x69, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x10, 0x2e, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x10, 0x2e, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x73, 0x79, 0x6b, 0x65, 0x73, 0x31, 0x36, 0x2f, 0x72, 0x70,
	0x63, 0x66, 0x69, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fibonacci_proto_rawDescOnce sync.Once
	file_fibonacci_proto_rawDescData = file_fibonacci_proto_rawDesc
)

func file_fibonacci_proto_rawDescGZIP() []byte {
	file_fibonacci_proto_rawDescOnce.Do(func() {
		file_fibonacci_proto_rawDescData = protoimpl.X.CompressGZIP(file_fibonacci_proto_rawDescData)
	})
	return file_fibonacci_proto_rawDescData
}

var file_fibonacci_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_fibonacci_proto_goTypes = []interface{}{
	(*Empty)(nil),                 // 0: fibonacci.Empty
	(*Size)(nil),                  // 1: fibonacci.Size
	(*FibonacciRequest)(nil),      // 2: fibonacci.FibonacciRequest
	(*FibonacciResult)(nil),       // 3: fibonacci.FibonacciResult
	(*FibonacciRangeRequest)(nil), // 4: fibonacci.FibonacciRangeRequest
	(*FibonacciRangeResult)(nil),  // 5: fibonacci.FibonacciRangeResult
}
var file_fibonacci_proto_depIdxs = []int32{
	3, // 0: fibonacci.FibonacciRangeResult.result:type_name -> fibonacci.FibonacciResult
	2, // 1: fibonacci.Fibonacci.GetFib:input_type -> fibonacci.FibonacciRequest
	4, // 2: fibonacci.Fibonacci.GetFibRange:input_type -> fibonacci.FibonacciRangeRequest
	0, // 3: fibonacci.Fibonacci.GetCacheSize:input_type -> fibonacci.Empty
	4, // 4: fibonacci.Fibonacci.GetCacheSizeForRange:input_type -> fibonacci.FibonacciRangeRequest
	0, // 5: fibonacci.Fibonacci.ClearCache:input_type -> fibonacci.Empty
	3, // 6: fibonacci.Fibonacci.GetFib:output_type -> fibonacci.FibonacciResult
	5, // 7: fibonacci.Fibonacci.GetFibRange:output_type -> fibonacci.FibonacciRangeResult
	1, // 8: fibonacci.Fibonacci.GetCacheSize:output_type -> fibonacci.Size
	1, // 9: fibonacci.Fibonacci.GetCacheSizeForRange:output_type -> fibonacci.Size
	0, // 10: fibonacci.Fibonacci.ClearCache:output_type -> fibonacci.Empty
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_fibonacci_proto_init() }
func file_fibonacci_proto_init() {
	if File_fibonacci_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fibonacci_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fibonacci_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fibonacci_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibonacciRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fibonacci_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibonacciResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fibonacci_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibonacciRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fibonacci_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibonacciRangeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fibonacci_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fibonacci_proto_goTypes,
		DependencyIndexes: file_fibonacci_proto_depIdxs,
		MessageInfos:      file_fibonacci_proto_msgTypes,
	}.Build()
	File_fibonacci_proto = out.File
	file_fibonacci_proto_rawDesc = nil
	file_fibonacci_proto_goTypes = nil
	file_fibonacci_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FibonacciClient is the client API for Fibonacci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FibonacciClient interface {
	GetFib(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResult, error)
	GetFibRange(ctx context.Context, in *FibonacciRangeRequest, opts ...grpc.CallOption) (*FibonacciRangeResult, error)
	GetCacheSize(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Size, error)
	GetCacheSizeForRange(ctx context.Context, in *FibonacciRangeRequest, opts ...grpc.CallOption) (*Size, error)
	ClearCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type fibonacciClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciClient(cc grpc.ClientConnInterface) FibonacciClient {
	return &fibonacciClient{cc}
}

func (c *fibonacciClient) GetFib(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResult, error) {
	out := new(FibonacciResult)
	err := c.cc.Invoke(ctx, "/fibonacci.Fibonacci/GetFib", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciClient) GetFibRange(ctx context.Context, in *FibonacciRangeRequest, opts ...grpc.CallOption) (*FibonacciRangeResult, error) {
	out := new(FibonacciRangeResult)
	err := c.cc.Invoke(ctx, "/fibonacci.Fibonacci/GetFibRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciClient) GetCacheSize(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Size, error) {
	out := new(Size)
	err := c.cc.Invoke(ctx, "/fibonacci.Fibonacci/GetCacheSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciClient) GetCacheSizeForRange(ctx context.Context, in *FibonacciRangeRequest, opts ...grpc.CallOption) (*Size, error) {
	out := new(Size)
	err := c.cc.Invoke(ctx, "/fibonacci.Fibonacci/GetCacheSizeForRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciClient) ClearCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fibonacci.Fibonacci/ClearCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibonacciServer is the server API for Fibonacci service.
type FibonacciServer interface {
	GetFib(context.Context, *FibonacciRequest) (*FibonacciResult, error)
	GetFibRange(context.Context, *FibonacciRangeRequest) (*FibonacciRangeResult, error)
	GetCacheSize(context.Context, *Empty) (*Size, error)
	GetCacheSizeForRange(context.Context, *FibonacciRangeRequest) (*Size, error)
	ClearCache(context.Context, *Empty) (*Empty, error)
}

// UnimplementedFibonacciServer can be embedded to have forward compatible implementations.
type UnimplementedFibonacciServer struct {
}

func (*UnimplementedFibonacciServer) GetFib(context.Context, *FibonacciRequest) (*FibonacciResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFib not implemented")
}
func (*UnimplementedFibonacciServer) GetFibRange(context.Context, *FibonacciRangeRequest) (*FibonacciRangeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFibRange not implemented")
}
func (*UnimplementedFibonacciServer) GetCacheSize(context.Context, *Empty) (*Size, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCacheSize not implemented")
}
func (*UnimplementedFibonacciServer) GetCacheSizeForRange(context.Context, *FibonacciRangeRequest) (*Size, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCacheSizeForRange not implemented")
}
func (*UnimplementedFibonacciServer) ClearCache(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCache not implemented")
}

func RegisterFibonacciServer(s *grpc.Server, srv FibonacciServer) {
	s.RegisterService(&_Fibonacci_serviceDesc, srv)
}

func _Fibonacci_GetFib_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).GetFib(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.Fibonacci/GetFib",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).GetFib(ctx, req.(*FibonacciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fibonacci_GetFibRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).GetFibRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.Fibonacci/GetFibRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).GetFibRange(ctx, req.(*FibonacciRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fibonacci_GetCacheSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).GetCacheSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.Fibonacci/GetCacheSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).GetCacheSize(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fibonacci_GetCacheSizeForRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).GetCacheSizeForRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.Fibonacci/GetCacheSizeForRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).GetCacheSizeForRange(ctx, req.(*FibonacciRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fibonacci_ClearCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).ClearCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.Fibonacci/ClearCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).ClearCache(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fibonacci_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibonacci.Fibonacci",
	HandlerType: (*FibonacciServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFib",
			Handler:    _Fibonacci_GetFib_Handler,
		},
		{
			MethodName: "GetFibRange",
			Handler:    _Fibonacci_GetFibRange_Handler,
		},
		{
			MethodName: "GetCacheSize",
			Handler:    _Fibonacci_GetCacheSize_Handler,
		},
		{
			MethodName: "GetCacheSizeForRange",
			Handler:    _Fibonacci_GetCacheSizeForRange_Handler,
		},
		{
			MethodName: "ClearCache",
			Handler:    _Fibonacci_ClearCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fibonacci.proto",
}
